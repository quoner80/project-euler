# Cyclical figurate numbers
#
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
#
#   Triangle    P3(n) = n * (n + 1) / 2        1, 3,  6, 10, 15, ...
#   Square      P4(n) = n^2                    1, 4,  9, 16, 25, ...
#   Pentagonal  P5(n) = n * ((3 * n) - 1) / 2  1, 5, 12, 22, 35, ...
#   Hexagonal   P6(n) = n * ((2 * n) - 1)      1, 6, 15, 28, 45, ...
#   Heptagonal  P7(n) = n * ((5 * n) - 3) / 2  1, 7, 18, 34, 55, ...
#   Octagonal   P8(n) = n * ((3 * n) - 2)      1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties:
#   1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#   2. Each polygonal type: triangle (P3(127) = 8128), square (P4(91) = 8281), and pentagonal (P5(44) = 2882), is represented by a different number in the set.
#   3. This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

import time;

start_time = time.time();

FOUR_DIGIT_TRIANGLE_RANGE   = [45, 140];
FOUR_DIGIT_SQUARE_RANGE     = [32, 100];
FOUR_DIGIT_PENTAGONAL_RANGE = [26, 82];
FOUR_DIGIT_HEXAGONAL_RANGE  = [23, 71];
FOUR_DIGIT_HEPTAGONAL_RANGE = [21, 64];
FOUR_DIGIT_OCTAGONAL_RANGE  = [19, 59];

def get_triangle(n):
    return n * (n + 1) / 2;

def get_square(n):
    return n * n;

def get_pentagonal(n):
    return n * ((3 * n) - 1) / 2;

def get_hexagonal(n):
    return n * ((2 * n) - 1);

def get_heptagonal(n):
    return n * ((5 * n) - 3) / 2;

def get_octagonal(n):
    return n * ((3 * n) - 2);

triangles = [];
for n in range(FOUR_DIGIT_TRIANGLE_RANGE[0], FOUR_DIGIT_TRIANGLE_RANGE[1] + 1):
    triangles.append(get_triangle(n));

squares = [];
for n in range(FOUR_DIGIT_SQUARE_RANGE[0], FOUR_DIGIT_SQUARE_RANGE[1] + 1):
    squares.append(get_square(n));

pentagonals = [];
for n in range(FOUR_DIGIT_PENTAGONAL_RANGE[0], FOUR_DIGIT_PENTAGONAL_RANGE[1] + 1):
    pentagonals.append(get_pentagonal(n));

hexagonals = [];
for n in range(FOUR_DIGIT_HEXAGONAL_RANGE[0], FOUR_DIGIT_HEXAGONAL_RANGE[1] + 1):
    hexagonals.append(get_hexagonal(n));

heptagonals = [];
for n in range(FOUR_DIGIT_HEPTAGONAL_RANGE[0], FOUR_DIGIT_HEPTAGONAL_RANGE[1] + 1):
    heptagonals.append(get_heptagonal(n));

octagonals = [];
for n in range(FOUR_DIGIT_OCTAGONAL_RANGE[0], FOUR_DIGIT_OCTAGONAL_RANGE[1] + 1):
    octagonals.append(get_octagonal(n));

figurates = [triangles, squares, pentagonals, hexagonals, heptagonals, octagonals];

def get_successors(base, figurate_list):
    successors = [];
    last_2 = base % 100;
    for figurate in figurate_list:
        if last_2 == figurate / 100:
            successors.append(figurate)
    return successors;

def print_solution(triangle, successor_sequence, figurate_index_sequence):
    sequence_sum = triangle + sum(successor_sequence);
    n = triangles.index(triangle) + FOUR_DIGIT_TRIANGLE_RANGE[0];
    print "P3[%d] = %d" % (n, triangle);
    for i in range(5):
        figurate_index = figurate_index_sequence[i];
        successor = successor_sequence[i];
        range_start = 0;
        if figurate_index == 1:
            range_start = FOUR_DIGIT_SQUARE_RANGE[0];
        elif figurate_index == 2:
            range_start = FOUR_DIGIT_PENTAGONAL_RANGE[0];
        elif figurate_index == 3:
            range_start = FOUR_DIGIT_HEXAGONAL_RANGE[0];
        elif figurate_index == 4:
            range_start = FOUR_DIGIT_HEPTAGONAL_RANGE[0];
        elif figurate_index == 5:
            range_start = FOUR_DIGIT_OCTAGONAL_RANGE[0];
        n = figurates[figurate_index].index(successor) + range_start;
        print "P%d[% 3d] = %d" % (figurate_index + 3, n, successor);
        figurate_index_sequence[i];
    print "sum = %d." % sequence_sum;
    return;

for index_1 in range(1, 6):
    for index_2 in range(1, 6):
        if not index_2 == index_1:
            for index_3 in range(1, 6):
                if not (index_3 == index_2 or index_3 == index_1):
                    for index_4 in range(1, 6):
                        if not (index_4 == index_3 or index_4 == index_2 or index_4 == index_1):
                            for index_5 in range(1, 6):
                                if not (index_5 == index_4 or index_5 == index_3 or index_5 == index_2 or index_5 == index_1):
                                    # print index_1, index_2, index_3, index_4, index_5;
                                    for triangle in triangles:
                                        figurates_1 = figurates[index_1];
                                        successors_1 = get_successors(triangle, figurates_1);
                                        for successor_1 in successors_1:
                                            figurates_2 = figurates[index_2];
                                            successors_2 = get_successors(successor_1, figurates_2);
                                            for successor_2 in successors_2:
                                                figurates_3 = figurates[index_3];
                                                successors_3 = get_successors(successor_2, figurates_3);
                                                for successor_3 in successors_3:
                                                    figurates_4 = figurates[index_4];
                                                    successors_4 = get_successors(successor_3, figurates_4);
                                                    for successor_4 in successors_4:
                                                        figurates_5 = figurates[index_5];
                                                        successors_5 = get_successors(successor_4, figurates_5);
                                                        for successor_5 in successors_5:
                                                            figurates_6 = triangles;
                                                            successors_6 = get_successors(successor_5, figurates_6);
                                                            if triangle in successors_6:
                                                                successor_sequence = [successor_1, successor_2, successor_3, successor_4, successor_5];
                                                                figurate_index_sequence = [index_1, index_2, index_3, index_4, index_5];
                                                                print_solution(triangle, successor_sequence, figurate_index_sequence);

'''
print get_triangle(128);
print get_square(75);
print get_heptagonal(32);
print get_octagonal(21);
print get_hexagonal(64);
print get_pentagonal(44);
'''
print;
print "Execution time = %f seconds." % (time.time() - start_time);
